import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { toast } from "@/components/ui/use-toast";
import { ArrowLeft, Upload, Utensils, ShoppingCart } from "lucide-react";
import { Vendor, CreateVendorFormData } from "@/types/vendor";

export default function CreateVendorPage() {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState<CreateVendorFormData>({
    name: "",
    owner: "",
    email: "",
    phone: "",
    location: "",
    address: "",
    type: "food",
    category: "",
    description: "",
    image: null,
  });

  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  const foodCategories = [
    "Fine Dining",
    "Italian Restaurant",
    "Fast Food",
    "Hotel Restaurant",
    "Street Food",
    "Cafe",
    "Bakery",
    "Pizza Restaurant",
    "Chinese Restaurant",
    "Mexican Restaurant",
    "Indian Restaurant",
    "Japanese Restaurant",
    "Thai Restaurant",
    "Mediterranean",
    "BBQ Restaurant",
    "Seafood Restaurant",
    "Vegetarian Restaurant",
    "Other",
  ];

  const groceryCategories = [
    "Organic Grocery",
    "General Grocery",
    "Health Food Store",
    "Wholesale Grocery",
    "Produce Store",
    "Specialty Store",
    "Convenience Store",
    "Supermarket",
    "Farmers Market",
    "Bulk Store",
    "Ethnic Grocery",
    "Gourmet Store",
    "Other",
  ];

  const handleInputChange = (field: string, value: string) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
    // Clear error for this field when user starts typing
    if (errors[field]) {
      setErrors((prev) => ({ ...prev, [field]: "" }));
    }
  };

  const handleTypeChange = (value: "food" | "grocery") => {
    setFormData((prev) => ({ ...prev, type: value, category: "" }));
  };

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setFormData((prev) => ({ ...prev, image: file }));
    }
  };

  const validateForm = () => {
    const newErrors: { [key: string]: string } = {};

    if (!formData.name.trim()) newErrors.name = "Vendor name is required";
    if (!formData.owner.trim()) newErrors.owner = "Owner name is required";
    if (!formData.email.trim()) newErrors.email = "Email is required";
    else if (!/\S+@\S+\.\S+/.test(formData.email))
      newErrors.email = "Email is invalid";
    if (!formData.phone.trim()) newErrors.phone = "Phone number is required";
    if (!formData.location.trim()) newErrors.location = "Location is required";
    if (!formData.category) newErrors.category = "Category is required";

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      toast({
        title: "Validation Error",
        description: "Please fix the errors in the form",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);

    try {
      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 2000));

      // Here you would typically send the data to your backend
      // For now, we'll just simulate the creation
      const newVendor: Partial<Vendor> = {
        id: Date.now(), // In a real app, this would be generated by the backend
        name: formData.name,
        owner: formData.owner,
        location: formData.location,
        category: formData.category,
        type: formData.type,
        status: "pending",
        rating: 0,
        orders: 0,
        revenue: "$0",
        joinDate: new Date().toLocaleDateString("en-US", {
          year: "numeric",
          month: "short",
          day: "numeric",
        }),
        image:
          "https://placehold.co/400x400/" +
          (formData.type === "food" ? "orange" : "green") +
          "/white",
      };

      console.log("New vendor data:", newVendor);

      toast({
        title: "Vendor created successfully!",
        description: "The new vendor has been added and is pending approval.",
      });

      // Navigate back to vendors page
      navigate("/vendors");
    } catch (error) {
      toast({
        title: "Error creating vendor",
        description:
          error instanceof Error ? error.message : "Something went wrong",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col gap-6">
      <div className="flex flex-col items-start gap-4">
        <Button
          variant="outline"
          size="sm"
          onClick={() => navigate("/vendors")}
          className="flex items-center gap-2"
        >
          <ArrowLeft className="h-4 w-4" />
          Back to Vendors
        </Button>
        <div>
          <h1 className="text-3xl font-bold tracking-tight">
            Create New Vendor
          </h1>
          <p className="text-muted-foreground">
            Add a new vendor to the system
          </p>
        </div>
      </div>

      <form onSubmit={handleSubmit}>
        <div className="grid grid-cols-3 gap-6">
          {/* Vendor Type Selection */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                Vendor Type
              </CardTitle>
              <CardDescription>
                Choose the type of vendor you want to add
              </CardDescription>
            </CardHeader>
            <CardContent>
              <RadioGroup
                value={formData.type}
                onValueChange={(value) =>
                  handleTypeChange(value as "food" | "grocery")
                }
                className="grid gap-4"
              >
                <div className="flex items-center space-x-2 border rounded-lg p-4 hover:bg-muted/50">
                  <RadioGroupItem value="food" id="food" />
                  <Label
                    htmlFor="food"
                    className="flex items-center gap-2 cursor-pointer"
                  >
                    <Utensils className="h-5 w-5 text-orange-500" />
                    <div>
                      <p className="font-medium">Food Vendor</p>
                      <p className="text-sm text-muted-foreground">
                        Restaurants, cafes, hotels, etc.
                      </p>
                    </div>
                  </Label>
                </div>
                <div className="flex items-center space-x-2 border rounded-lg p-4 hover:bg-muted/50">
                  <RadioGroupItem value="grocery" id="grocery" />
                  <Label
                    htmlFor="grocery"
                    className="flex items-center gap-2 cursor-pointer"
                  >
                    <ShoppingCart className="h-5 w-5 text-green-500" />
                    <div>
                      <p className="font-medium">Grocery Vendor</p>
                      <p className="text-sm text-muted-foreground">
                        Grocery stores, markets, etc.
                      </p>
                    </div>
                  </Label>
                </div>
              </RadioGroup>
            </CardContent>
          </Card>

          {/* Basic Information */}
          <Card>
            <CardHeader>
              <CardTitle>Basic Information</CardTitle>
              <CardDescription>
                Enter the basic details of the vendor
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="name">Vendor Name *</Label>
                  <Input
                    id="name"
                    placeholder="Enter vendor name"
                    value={formData.name}
                    onChange={(e) => handleInputChange("name", e.target.value)}
                    className={errors.name ? "border-red-500" : ""}
                    required
                  />
                  {errors.name && (
                    <p className="text-sm text-red-500">{errors.name}</p>
                  )}
                </div>
                <div className="space-y-2">
                  <Label htmlFor="category">Category *</Label>
                  <Select
                    value={formData.category}
                    onValueChange={(value) =>
                      handleInputChange("category", value)
                    }
                  >
                    <SelectTrigger
                      className={errors.category ? "border-red-500" : ""}
                    >
                      <SelectValue placeholder="Select category" />
                    </SelectTrigger>
                    <SelectContent>
                      {(formData.type === "food"
                        ? foodCategories
                        : groceryCategories
                      ).map((category) => (
                        <SelectItem key={category} value={category}>
                          {category}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  {errors.category && (
                    <p className="text-sm text-red-500">{errors.category}</p>
                  )}
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  placeholder="Brief description of the vendor"
                  value={formData.description}
                  onChange={(e) =>
                    handleInputChange("description", e.target.value)
                  }
                  rows={3}
                />
              </div>
            </CardContent>
          </Card>

          {/* Owner Information */}
          <Card>
            <CardHeader>
              <CardTitle>Owner Information</CardTitle>
              <CardDescription>
                Contact details of the vendor owner
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="owner">Owner Name *</Label>
                  <Input
                    id="owner"
                    placeholder="Enter owner name"
                    value={formData.owner}
                    onChange={(e) => handleInputChange("owner", e.target.value)}
                    className={errors.owner ? "border-red-500" : ""}
                    required
                  />
                  {errors.owner && (
                    <p className="text-sm text-red-500">{errors.owner}</p>
                  )}
                </div>
                <div className="space-y-2">
                  <Label htmlFor="phone">Phone Number *</Label>
                  <Input
                    id="phone"
                    placeholder="Enter phone number"
                    value={formData.phone}
                    onChange={(e) => handleInputChange("phone", e.target.value)}
                    className={errors.phone ? "border-red-500" : ""}
                    required
                  />
                  {errors.phone && (
                    <p className="text-sm text-red-500">{errors.phone}</p>
                  )}
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor="email">Email Address *</Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="Enter email address"
                  value={formData.email}
                  onChange={(e) => handleInputChange("email", e.target.value)}
                  className={errors.email ? "border-red-500" : ""}
                  required
                />
                {errors.email && (
                  <p className="text-sm text-red-500">{errors.email}</p>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Location Information */}
          <Card>
            <CardHeader>
              <CardTitle>Location Information</CardTitle>
              <CardDescription>Physical location of the vendor</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="location">City, State *</Label>
                <Input
                  id="location"
                  placeholder="e.g., New York, NY"
                  value={formData.location}
                  onChange={(e) =>
                    handleInputChange("location", e.target.value)
                  }
                  className={errors.location ? "border-red-500" : ""}
                  required
                />
                {errors.location && (
                  <p className="text-sm text-red-500">{errors.location}</p>
                )}
              </div>
              <div className="space-y-2">
                <Label htmlFor="address">Full Address</Label>
                <Textarea
                  id="address"
                  placeholder="Enter complete address"
                  value={formData.address}
                  onChange={(e) => handleInputChange("address", e.target.value)}
                  rows={3}
                />
              </div>
            </CardContent>
          </Card>

          {/* Image Upload */}
          <Card>
            <CardHeader>
              <CardTitle>Vendor Image</CardTitle>
              <CardDescription>
                Upload a logo or image for the vendor
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex items-center justify-center w-full">
                <Label
                  htmlFor="image"
                  className="flex flex-col items-center justify-center w-full h-32 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800 dark:border-gray-600"
                >
                  <div className="flex flex-col items-center justify-center pt-5 pb-6">
                    <Upload className="w-8 h-8 mb-2 text-gray-400" />
                    <p className="mb-2 text-sm text-gray-500">
                      <span className="font-semibold">Click to upload</span> or
                      drag and drop
                    </p>
                    <p className="text-xs text-gray-500">
                      PNG, JPG or GIF (MAX. 800x400px)
                    </p>
                  </div>
                  <Input
                    id="image"
                    type="file"
                    className="hidden"
                    accept="image/*"
                    onChange={handleImageUpload}
                  />
                </Label>
              </div>
              {formData.image && (
                <p className="mt-2 text-sm text-green-600">
                  Image selected: {formData.image.name}
                </p>
              )}
            </CardContent>
          </Card>

          {/* Submit Button */}
          <div className="flex justify-end gap-4">
            <Button
              type="button"
              variant="outline"
              onClick={() => navigate("/vendors")}
              disabled={isLoading}
            >
              Cancel
            </Button>
            <Button type="submit" disabled={isLoading}>
              {isLoading ? "Creating..." : "Create Vendor"}
            </Button>
          </div>
        </div>
      </form>
    </div>
  );
}
